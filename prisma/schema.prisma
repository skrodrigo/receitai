generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  sessions        Session[]
  accounts        Account[]
  credits         Int          @default(1) 
  unlockedRecipes UserRecipe[]
  favorites       Favorite[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Recipe {
  id           String       @id @default(cuid())
  title        String
  description  String
  image        String?
  time         String
  difficulty   String
  rating       Float
  ingredients  Json
  instructions Json
  isPublic     Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  categoryId   String
  category     Category     @relation(fields: [categoryId], references: [id])
  unlockedBy   UserRecipe[]
  favoritedBy  Favorite[]

  @@map("recipes")
}

model UserRecipe {
  userId     String
  recipeId   String
  unlockedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([userId, recipeId])
  @@map("user_recipes")
}



model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  recipes   Recipe[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("favorites")
}
